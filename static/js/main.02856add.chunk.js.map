{"version":3,"sources":["components/Splash.js","components/Header.js","components/MainEvent.js","components/Events.js","App.js","serviceWorker.js","index.js"],"names":["Splash","props","className","id","alt","src","onClick","this","handleClick","React","Component","Header","handleABC","handleDate","MainEvent","showComments","loadComments","map","comment","Index","key","user","avatarUrl","name","title","timestamp","message","showGuestsImg","loadGuests","guests","eventName","hostImg","host","type","time","location","Events","eventsArray","eventsCard","length","App","state","isSplash","events","mainEvent","latitude","longitude","creator","comments","showMainEvent","showEvents","indexForMainEvent","getIndexForMainEvent","bind","sortArrayABC","sortArrayDate","closeEvent","closeSplash","fetch","then","request","json","setState","eventArrayIndex","getState","sort","a","b","handleShowEvents","handleSplash","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.02856add.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nclass Splash extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render(){  \r\n        return(\r\n            <section className=\"animated bounceInUp\" id=\"splash\">\r\n                <div className=\"splash-container text-center\">\r\n                    <img className=\"logo\" alt=\"drinks-logo\" src=\"https://i.ibb.co/0qfCRyL/logo.png\" />\r\n                    <h3>Why limit happy to an hour?</h3>\r\n                    <button onClick={this.props.handleClick}>\r\n                        <img className=\"arrow\" alt=\"button-arrow\" src=\"https://www.pikpng.com/pngl/m/58-582351_free-png-download-arrow-left-to-right-png.png\" />\r\n                    </button>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Splash","import React from \"react\"\r\n\r\nclass Header extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render(){\r\n        return(\r\n            <section id=\"header\">\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row col-12 d-flex justify-content-center\">\r\n                        <img alt=\"drinks-logo\" src=\"https://i.ibb.co/0qfCRyL/logo.png\" />\r\n                    </div>\r\n                <hr />\r\n                    <div className=\"row d-flex justify-content-center\">\r\n                        <h5 className=\"pt-2\">Sort Events:</h5>\r\n                    </div>\r\n                    <div className=\"row d-flex justify-content-center\">\r\n                        <button className=\"col-md-2 col-10\" onClick={this.props.handleABC}>Alphabetically</button>\r\n                        <button className=\"col-md-2 col-10\" onClick={this.props.handleDate}>Date</button>\r\n                    </div>\r\n                    <hr />\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\n\r\nclass MainEvent extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render(){\r\n    //load comments and map the array to return new media for each event that has a comment\r\n    const showComments = this.props.loadComments.map((comment, Index) => \r\n        <div key={Index} className=\"media col-xl-6 col-lg-8 col-md-9 col-sm-11 col-10\">\r\n            <div className=\"media-left media-middle my-auto media-img\">\r\n                <img src={comment.user.avatarUrl} alt={comment.user.name} title={comment.user.name}  className=\"media-object\"/>\r\n            </div>\r\n            <div className=\"media-body p-5\">\r\n                <h4 className=\"media-heading\">{comment.user.name} <small><i>Posted on {comment.timestamp}</i></small></h4>\r\n                <p>{comment.message}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n    //load guest images and map the array to return img for each guest, Index used as key prop as guests do not have id in API\r\n    const showGuestsImg = this.props.loadGuests.map((guests, Index) => \r\n            <img key={Index} className=\"m-2 guest-imgs\" src={guests.avatarUrl} alt={guests.name} title={guests.name} />\r\n        )\r\n        const { eventName, hostImg, host, type, time, location, guests } = this.props\r\n        return (\r\n            <section className=\"animated bounceInDown pt-4\" id=\"main-event\">\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row d-flex justify-content-center\">\r\n                        <div className=\"col-xl-6 col-lg-8 col-md-9 col-sm-11 col-10 text-center main-panel\">\r\n                            <h1><u>{eventName}</u></h1>\r\n                            <hr className=\"hr-4\" />\r\n                            <p>Hosted by:</p>\r\n                            <img alt={host} title={host} src={hostImg} />\r\n                            <h5>{host}</h5>\r\n                            <hr className=\"hr-4\" />\r\n                            <h2>Drinks: {type}</h2>\r\n                            <hr className=\"hr-4\" />\r\n                            <h3 className=\"time-h3\">{time}</h3>\r\n                            <h3>@ The {location}</h3>\r\n                            <hr className=\"hr-4\" />\r\n                            <h5>{guests}</h5>\r\n                            <div className=\"col-12\">\r\n                                <p className=\"guests-p\">Guests Attending:</p>\r\n                                {showGuestsImg}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"container-fluid\">\r\n                </div>\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row d-flex justify-content-center\">\r\n                        {showComments}\r\n                    </div>\r\n                </div>\r\n                <div className=\"row d-flex justify-content-center\">\r\n                    <button className=\"col-xl-6 col-lg-8 col-md-9 col-sm-11 col-10 mt-4\" onClick={this.props.handleClick}>Close</button>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nexport default MainEvent","import React from \"react\"\r\n\r\nclass Events extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    render(){\r\n    const eventsArray = this.props.eventsArray.map((eventsCard, Index) =>\r\n            //run handleclick and pass the index of each array item to the method ran on handleclick\r\n            <div onClick={() => this.props.handleClick(Index)} key={eventsCard.id} className=\"col-xl-3 col-md-5 text-center event-tile m-4\">\r\n                {/* Change to img matching events type */}\r\n                {/*<h3>Event img</h3>*/}\r\n                <h2><u>{eventsCard.title}</u></h2>\r\n                <h3>{eventsCard.type}</h3>\r\n                <h5>Location: {eventsCard.location.name}</h5>\r\n                {/* SPLIT DATE AND TIME*/}\r\n                <p>Time/Date: {eventsCard.time}</p>\r\n                <p>Attending: {eventsCard.guests.length}</p>\r\n                {/* add event listener for mouseover that changes css\r\n                <div className=\"overlay\">\r\n                    <h1>see more</h1>\r\n                </div>*/}\r\n            </div>\r\n    )\r\n        return(\r\n            <section id=\"events\">\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row d-flex justify-content-around\">\r\n                    {eventsArray}      \r\n                </div>\r\n            </div>\r\n        </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Events","import React from 'react'\nimport './css/style.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Splash from \"./components/Splash\"\nimport Header from \"./components/Header\"\nimport MainEvent from './components/MainEvent'\nimport Events from \"./components/Events\"\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state = {\n      isSplash: true,\n      events: [],\n      mainEvent: {\n        id: 0,\n        type: \"\",\n        time: \"\",\n        title: \"\",\n        location: {name: \"\", latitude: 0, longitude: 0},\n        creator: {name: \"\", avatarUrl: \"\"},\n        guests: [],\n        comments: []\n      },\n      showMainEvent: false,\n      showEvents: true,\n      indexForMainEvent: 0\n    }\n    //order properly\n    this.getIndexForMainEvent = this.getIndexForMainEvent.bind(this)\n    this.sortArrayABC = this.sortArrayABC.bind(this)\n    this.sortArrayDate = this.sortArrayDate.bind(this)\n    this.closeEvent = this.closeEvent.bind(this)\n    this.closeSplash = this.closeSplash.bind(this)\n  }\n  componentDidMount(){\n    fetch(\"https://mock-api.drinks.test.siliconrhino.io/events/\")\n    .then(request => request.json())\n    .then(json => this.setState({events: json}))\n  }\n  //rename all accordingly &&  SPLIT UP LOGIC AND DISPLAY ELEMENTS \n  //pass in the Index parameter from eventsArray in Events.js  \n  getIndexForMainEvent(eventArrayIndex){\n    this.setState({showMainEvent:true/*, showEvents:false*/})\n    const getState = this.state.events\n    //use Index parameter to set state to element that was clicked \n    this.setState({indexForMainEvent: eventArrayIndex, mainEvent: getState[eventArrayIndex] })\n  }\n  closeSplash(){\n    this.setState({isSplash:false})\n  }\n  closeEvent(){\n    this.setState({showMainEvent: false, showEvents:true})\n  }\n  sortArrayABC(){\n    const eventsArray = this.state.events\n    eventsArray.sort((a, b) => {\n      if(a.title < b.title) { return -1 }\n      if(a.title > b.title) { return 1 }\n      return 0\n  })\n    this.setState({events: eventsArray})\n  }\n  sortArrayDate(){\n    const eventsArray = this.state.events\n    eventsArray.sort((a, b) => {\n      if(a.time < b.time) { return -1 }\n      if(a.time > b.time) { return 1 }\n      return 0\n  })\n    this.setState({events: eventsArray})\n  }\n  render(){\n    const { title, type, time, location, creator, comments, guests } = this.state.mainEvent\n    const showMainEvent = this.state.showMainEvent?  \n    <MainEvent \n    eventName={title}\n    type={type} \n    time={time}\n    location={location.name}\n    host={creator.name}\n    hostImg={creator.avatarUrl}\n    guests={guests.name}\n    loadComments={comments}\n    loadGuests={guests}\n    handleClick={this.closeEvent}\n    />\n    :\n    null\n    const handleShowEvents = this.state.showEvents ?\n    <Events \n    eventsArray={this.state.events} \n    handleClick={this.getIndexForMainEvent} \n    />\n    :\n    null\n    const handleSplash = this.state.isSplash? \n    <Splash handleClick={this.closeSplash} /> \n    : \n    <div className=\"animated bounceInLeft\">  \n    <Header handleABC={this.sortArrayABC} handleDate={this.sortArrayDate} />      \n    {showMainEvent}\n    {handleShowEvents}\n    </div>\n    return (\n      <div className=\"App\">\n        {handleSplash}\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}